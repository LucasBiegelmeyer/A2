[0] Jogo do Campo Minado Simplificado (Recomendado):

Implementação do jogo (versão simplificada) do campo minado. O programa deverá ter uma tela inicial, permitindo que o jogador peça ajuda (explica o funcionamento do jogo), que pode ser implementado em um novo FORM com um MEMO. A tela principal deve permitir selecionar duas dificuldades, a fácil (3x3 com 3 bombas) e a difícil (5x5 com 15 bombas). Utilize Bitbtn para implementar a grade, com imagens para posição não acessada (Ponto de Interrogação), posição acessada sem bomba (Botão sem imagem) e bomba na posição (Imagem de Mina). Em cada nível de dificuldade você deverá ter um relógio, que deve começar contando de 99 segundos até 0. Utilize TIMER para implementar esta função. Você deve criar um contador de jogadas que deve começar contando as posições a serem jogadas (Ex: no fácil, são 9 posições onde 6 precisam ser jogadas e 3 possuem bombas. O contador deve começar em 6 neste caso). Assim, o jogador saberá quantas posições ainda precisa jogar. Quando o jogo acabar (seja em caso de vitória ou derrota), todo o tabuleiro precisa ser mostrado. O programa precisa informar se o jogador ganhou ou perdeu (ShowMessage), informando sua respectiva pontuação. A pontuação é calculada multiplicando o tempo remanescente pelo número de jogadas feitas. Por exemplo, se o jogador no nível fácil jogou 5 posições, tendo acertado 4 e errado uma, no tempo 60, sua pontuação total será de 240. O programa precisa ainda implementar uma tela de ranking com os 5 melhores jogadores, mostrando a posição, o nome (5 chars) e a pontuação. Caso o jogador vá para o ranking (possua pontuação >= a um dos 5 elementos do ranking), você deve pedir o nome (Inputbox) e colocar o jogador no raking. O ranking deve ser mostrado em um Panel que deve permitir (botão) voltar a tela inicial, ou deve durar 20 segundos, voltando automáticamente para a tela inicial.

[1] Programa DELPHI com disciplinas do ensino médio (Recomendado):

Os grupos devem desenvolver um programa DELPHI (com várias telas), capaz de realizar cálculos das equações (conteúdos) do segundo ano ano ensino médio, como matemática, física e química. Na área da matemática, escolham pelo menos dois destes programas: (i) Pitágoras; (ii) Calculadora da Regra de 3; (iii) Cálculo geométrico de área pdo quadrado/retângulo/triângulo. (iv) Cálculo trigonométrico do triângulo retângulo (sen/cos/tang). Na área da física, escolham pelo menos dois destes programas: (i) Conversor de Temperatura; (ii) Conversão de Pressão; (iii) Conversor de distância; (iv) Caculadora Básica científica. O professor pede que os alunos utilizem (no mínimo) 12 componentes visuais do DELPHI (Aprendidos na disciplina), juntamente com suas propriedades. Utilizem campos de leitura como MaskEdit e campos de seleção como RadioGroup e CheckBox. Realizem a modelagem da tela utilizando elementos como PageControl, Panel e Form. Procurem criar programas com mecânicas de tela (usabilidade), capazes de surprender o usuário.

[2] Agenda de contatos:

Os grupos devem desenvolver uma agenda de contatos (usuários com senha). A agenda deve possuir uma tela de login (que utiliza senhas, capaz de permitir o acesso a tela principal da agenda. A Agenda deve possuir uma matriz em memória, que armazena contatos (linhas). Cada contato (linha) pode possuir diferentes atributos (colunas) como nome, idade, sexo e telefone. O programa da agenda deve possuir as seguintes funções: (i) Cadastro de contatos; (ii) Remoção de contatos; (iii) Listagem de todos os contatos cadastrados; (iv) Atualização de contatos. Durante o desenvolvimento da agenda, utilize (pelo menos) 12 componentes visuais do DELPHI (Aprendidos na disciplina), juntamente com suas propriedades. Não se esqueça de implementar os tratamentos das entradas, de maneira que o banco de dados de contatos da agenda (matriz), possua valores cadastrados válidos. Por exemplo, o telefone, pode ser implementado via MaskEdit. Já o sexo, pode ser implementado com um RadioGroup. Pense nas possíveis situações que podem acontecer, quando dois contatos possuem o mesmo nome, ou quando você quer editar alguém, adicionando um nome que já existe na Agenda. Estas situações precisam ser pensadas e programadas de maneira que a Agenda seja capaz de evitar certas operações (ilegais). Procurem criar programas com mecânicas de tela (usabilidade), capazes de surprender o usuário.

[3] Sistema de Caixa Eletrônico:

Os grupos devem desenvolver um sistema de caixa eletrônico (usuários com senha). O sistema deve possuir uma tela de login (que utiliza senhas, capaz de permitir o acesso a tela principal do caixa eletrônico. O sistema deve possuir uma matriz em memória, que armazena informações a respeito dos clientes (linhas). Cada cliente (linha) pode possuir diferentes atributos (colunas) como ID, nome, saldoContaCorrente, saldoContaPoupança, saldoContaSalário. O programa do caixa eletrônico deve possuir as seguintes funções: (i) Permitir que um cliente seja cadastrado no banco de dados. (ii) Permitir que todos os clientes cadastrados sejam listados. (iii) Realizar saque em cada uma das contas do usuário (Lembre que o usuário não é obrigado a possuir todas as contas disponíveis); (iv) Realizar depósito em cada uma das contas do usuário (Lembre que o usuário não é obrigado a possuir todas as contas disponíveis); (iii) Realizar transferências entre contas. (v) Realizar simulações de investimentos (utilizando os dados de algumas das contas existentes). Durante o desenvolvimento do sistema de caixa eletrônico, utilize (pelo menos) 12 componentes visuais do DELPHI (Aprendidos na disciplina), juntamente com suas propriedades. Não se esqueça de implementar os tratamentos das entradas, de maneira que o banco de dados de clientes do sistema, possua valores cadastrados válidos. Por exemplo, nunca aceite valores de saldo negativos, que pode ser implementado via MaskEdit. Já o tipo de conta, pode ser implementado com um RadioGroup. Pense nas possíveis situações durante a modelagem e a implementação do problema. Estas situações precisam ser pensadas e programadas de maneira que o sistema de caixa eletrônico seja capaz de evitar certas operações (ilegais). Procurem criar programas com mecânicas de tela (usabilidade), capazes de surprender o usuário.
